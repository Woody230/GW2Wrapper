package com.bselzer.gw2.v2.client.generator.instance

import com.bselzer.gw2.v2.client.generator.BuildKonfig
import com.bselzer.gw2.v2.client.generator.query.Query
import com.bselzer.gw2.v2.client.instance.BaseClient
import com.bselzer.gw2.v2.client.request.options.DefaultGw2HttpOptions
import com.bselzer.ktx.poet.file.ClassImport
import com.squareup.kotlinpoet.FileSpec
import com.squareup.kotlinpoet.FunSpec
import com.squareup.kotlinpoet.ParameterSpec
import com.squareup.kotlinpoet.TypeSpec
import io.ktor.client.*
import kotlin.reflect.KClass

class Client<Model>(
    modelClass: KClass<Model>,
    path: String,
    vararg queries: Query
) where Model : Any {
    private companion object {
        const val HTTP_CLIENT = "httpClient"
        const val CONFIGURATION = "configuration"
    }

    private val httpClient: ParameterSpec = ParameterSpec.builder(HTTP_CLIENT, HttpClient::class).build()
    private val configuration: ParameterSpec = ParameterSpec.builder(CONFIGURATION, DefaultGw2HttpOptions::class).build()

    private val name: String = "${modelClass.simpleName}Client"

    private val primaryConstructor: FunSpec = FunSpec.constructorBuilder().apply {
        addParameter(httpClient)
        addParameter(configuration)
    }.build()

    private val clazz: TypeSpec = TypeSpec.classBuilder(name).apply {
        superclass(BaseClient::class)
        primaryConstructor(primaryConstructor)
        addSuperclassConstructorParameter(HTTP_CLIENT)
        addSuperclassConstructorParameter(CONFIGURATION)
        queries.forEach { query -> addFunction(query.function(path)) }
    }.build()

    val file: FileSpec = FileSpec.builder(BuildKonfig.OUTPUT_PACKAGE_NAME, name).apply {
        addFileComment("DO NOT EDIT! This code was autogenerated by ${BuildKonfig.MODULE} version ${BuildKonfig.VERSION}.")
        addType(clazz)

        queries.flatMap { query -> query.imports }.forEach { import ->
            with(import) { addImport() }
        }

        ClassImport(HttpClient::class).apply { addImport() }
        ClassImport(DefaultGw2HttpOptions::class).apply { addImport() }
    }.build()
}